{"version":3,"sources":["components/Slot/index.js","components/SlotMachine/index.js","utils/helpers.js","App.js","serviceWorker.js","index.js"],"names":["Slot","start","delay","list","item","init","width","height","getPosition","useCallback","letter","indexOf","toLowerCase","index","lastIndexOf","length","props","useSpring","from","top","to","config","duration","Math","floor","random","ul","className","style","map","key","SlotMachine","onStart","value","laps","auto","infinite","slotWidth","slotHeight","useState","setStart","useEffect","undefined","iterate","setTimeout","split","n","el","RegExp","test","App","toggle","alphabet","i","Array","reduce","result","push","toString","getAlphabet","numbers","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48b13dc9.chunk.js","sourcesContent":["import React, {useCallback} from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nimport './index.css';\r\n\r\nconst Slot = ({ start, delay, list, item, init, width, height }) => {\r\n  const getPosition = useCallback(letter => {\r\n    if (!start) return init ? -height * list.indexOf(letter.toLowerCase()) : 0;\r\n    const index = list.lastIndexOf(letter.toLowerCase());\r\n    return -height * (index > -1 ? index : list.length);\r\n  }, [start, init, list]);\r\n\r\n  const props = useSpring({\r\n    from: { top: 0 },\r\n    to: { top: getPosition(item) },\r\n    config: { duration: 1500 + Math.floor(Math.random() * 1500) + 100 },\r\n    delay\r\n  });\r\n\r\n  return (\r\n    <animated.ul className={'List'} style={props}>\r\n      {list.map((letter, index) => (\r\n        <li style={{ width: `${width}px`, height: `${height}px` }} key={index}>{letter}</li>\r\n      ))}\r\n    </animated.ul>\r\n  );\r\n};\r\n\r\nexport default Slot;\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\nimport './index.css';\r\nimport Slot from \"../Slot\";\r\nimport { isNumberOrLetter } from '../../utils/helpers';\r\n\r\nconst SlotMachine = ({ onStart, value, list, laps, init = false, auto = false, infinite = false, slotWidth = 50, slotHeight = 60 }) => {\r\n  const [start, setStart] = useState(auto);\r\n  let delay = -50;\r\n\r\n  const iterate = () => {\r\n    if (infinite) {\r\n      // Something between 1s and 30s\r\n      const delay = Math.floor(Math.random() * 30000) + 1000;\r\n      setTimeout(() => {\r\n        setStart(value => !value);\r\n        iterate();\r\n      }, delay);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onStart !== null && onStart !== undefined && !infinite) {\r\n      setStart(onStart);\r\n    }\r\n  }, [onStart, infinite]);\r\n\r\n  useEffect(iterate, [infinite]);\r\n\r\n  return (\r\n    <div className={'Counter'}>\r\n      {value.split('').map((n, index) => {\r\n        if (isNumberOrLetter(n)) {\r\n          delay += 50;\r\n          return (\r\n            <div className={'ListContainer'} key={index} style={{ width: `${slotWidth}px`, height: `${slotHeight}px` }}>\r\n              <Slot delay={delay} item={n} list={list} start={start} init={init} width={slotWidth} height={slotHeight}/>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return <span className={'StaticElement'} style={{ width: n === ' ' ? `${slotWidth}px` : 'auto', height: `${slotHeight}px` }} key={index}>{n}</span>\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SlotMachine;\r\n","export const getAlphabet = () => {\r\n  let i = 10;\r\n\r\n  return [...new Array(26)].reduce(result => {\r\n    result.push(i.toString(36));\r\n    i++;\r\n    return result;\r\n  }, []);\r\n};\r\n\r\nexport const isNumberOrLetter = el => new RegExp(/([a-z\\d])/, 'gi').test(el);\r\n","import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\nimport SlotMachine from \"./components/SlotMachine\";\r\nimport { getAlphabet } from \"./utils/helpers\";\r\n\r\nfunction App() {\r\n  const [start, toggle] = useState(false);\r\n  const alphabet = getAlphabet();\r\n  const list = [...alphabet, ...alphabet, ...alphabet];\r\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(n => n.toString());\r\n\r\n  return (\r\n    <>\r\n      <SlotMachine onStart={start} value={'Slot Machine'} list={list} />\r\n      <SlotMachine onStart={start} value={'Slot Machine'} list={list} init={true} />\r\n      <div className={'row'}>\r\n        <SlotMachine value={'Jackpot'} list={list} infinite={true} init={true} slotHeight={30} slotWidth={25} />\r\n        <SlotMachine value={'Jackpot'} list={list} infinite={true} init={true} slotHeight={30} slotWidth={25} />\r\n        <SlotMachine value={'Jackpot'} list={list} infinite={true} init={true} slotHeight={30} slotWidth={25} />\r\n      </div>\r\n      <SlotMachine value={'0123456789'} list={numbers} auto={true} />\r\n      <SlotMachine onStart={start} value={'0123456789'} list={[...numbers, ...numbers, ...numbers]} />\r\n      <SlotMachine onStart={start} value={'$1.234,34'} list={numbers} />\r\n      <div className={'Controls'}>\r\n        <button onClick={() => toggle(false)}>Reset</button>\r\n        <button onClick={() => toggle(true)}>Start</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}